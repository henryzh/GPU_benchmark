# KMEANS CUDA
#CUDA_DIR = /home/cxh/local/cuda-3.1/cuda
CUDA_DIR = /home/hangzhang/local/cuda
CUDA_LIB_DIR := $(CUDA_DIR)/lib
ifeq ($(shell uname -m), x86_64)
     ifeq ($(shell if test -d $(CUDA_DIR)/lib64; then echo T; else echo F; fi), T)
     	CUDA_LIB_DIR := $(CUDA_DIR)/lib64
     endif
endif

CC = gcc
CC_FLAGS =
NVCC = $(CUDA_DIR)/bin/nvcc
NVCC_FLAGS = -I$(CUDA_DIR)/include 

# 'make dbg=1' enables NVCC debugging
ifeq ($(dbg),1)
	CC_FLAGS = -g -O0
	NVCC_FLAGS += -g -O0
else
	CC_FLAGS = -O2
	NVCC_FLAGS += -O2
endif

# 'make emu=1' compiles the CUDA kernels for emulation
ifeq ($(emu),1)
	NVCC_FLAGS += -deviceemu
endif

OBJS = cluster.o getopt.o kmeans.o kmeans_clustering.o kmeans_cuda.o rmse.o

kmeans: $(OBJS)
	$(CC) $(CC_FLAGS) $(OBJS) -o kmeans -L$(CUDA_LIB_DIR) -lcuda -lcudart -lm -lstdc++
%.o: %.[ch]
	$(CC) $(CC_FLAGS) $< -c
kmeans_cuda.o: kmeans_cuda.cu 
	$(NVCC) $(NVCC_FLAGS) -c kmeans_cuda.cu
clean:
	rm -f *.o *~ kmeans kmeans_cuda.linkinfo
